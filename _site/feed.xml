<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
  <channel>
    <title>Zhaochen Blog</title>
    <description>做个有趣的人类。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 01 Apr 2018 00:17:06 +0800</pubDate>
    <lastBuildDate>Sun, 01 Apr 2018 00:17:06 +0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>mobileYY_CommandRoute</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“整理了一下以前参与的命令号路由这一块儿，这一块儿基本是推送落地的一个基石，现在越来越多的业务需要命令号路由系统，基本上每有一个业务都需要新加一个命令了~”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;url&quot;&gt;URL&lt;/h1&gt;
&lt;p&gt;URL，Uniform Resource Locator，统一资源定位符，是一种 URI，用定位的方式来精确描述。&lt;br /&gt;
URN，Uniform Resource Name，统一资源名称，也是一种 URI，用名字来命名但不指定如何定位某个Resource。&lt;br /&gt;
URI，Uniform Resource Identifier，统一资源标识符。
URN如同一个人的名称，而 URL代表一个人的住址。换言之，URN 定义某事物的身份，而 URL 提供查找该事物的方法。&lt;/p&gt;

&lt;h1 id=&quot;url-scheme&quot;&gt;URL Scheme&lt;/h1&gt;
&lt;p&gt;在https://dawnotdown.github.io这串网址里，scheme就是https，标识这个URL最初始的位置。&lt;br /&gt;
在iOS里URL Scheme一般用于苹果应用间的跳转。我们在一个应用的plist配置里定义这样一个scheme来告诉苹果系统这个应用的标识，通过[UIApplication sharedApplication] openURL或者Safari等方式来实现跳转的过程，对应的App通过application:openURL:…等方法来响应这一过程，进而可以实现某些App间的需求。&lt;/p&gt;

&lt;h1 id=&quot;app-inside-command&quot;&gt;App-Inside Command&lt;/h1&gt;
&lt;p&gt;对一个用户来说，每天完成App间的相互跳转的频率可能比在一个App内的跳转的频率还要低。对于开发来说更是，业务或者模块间相互的跳转只会越来越多，伴随着可能就是越来越大的耦合。&lt;br /&gt;
App-Inside Command，App内的命令号希望可以通过一串像命令一样的东西，来完成App内的各种跳转过程。&lt;br /&gt;
&lt;strong&gt;如何跳转&lt;/strong&gt; &lt;br /&gt;
从Window层开始找到当前的VC或Nav的某一根视图或TabBarC下的某一根视图&lt;br /&gt;
在当前VC进行present或dismiss掉Nav的视图然后再push &lt;br /&gt;
&lt;strong&gt;什么是命令号&lt;/strong&gt;&lt;br /&gt;
以前手Y的命令号是不规范的URL格式，&lt;br /&gt;
比如：&lt;br /&gt;
yymobile://Channel/Live/83191303/83191303，同一业务的path会变  &lt;br /&gt;
yymobile://Channel/Live/45294452/452294452?tpl=16777217，同一业务的path和query都会变  &lt;br /&gt;
我们希望把它统一改进为URL的样子并且支持路由功能。
比如：
yymobile://Channel/Live?sid=45294452&amp;amp;ssid=452294452&amp;amp;tpl=16777217，同一业务只有query会变&lt;/p&gt;

&lt;h1 id=&quot;app-inside-url&quot;&gt;App-Inside URL&lt;/h1&gt;
&lt;p&gt;对于上面的命令号我们改进为了下面的标准URL格式
&lt;img src=&quot;/img/mobileYY-CommandRoute_yymobile.jpg&quot; alt=&quot;图片1&quot; /&gt;
并且对原来旧的提供了支持，重新设计了路由，自此命令号升级为了路由系统。&lt;/p&gt;
&lt;h3 id=&quot;路由的作用&quot;&gt;路由的作用&lt;/h3&gt;
&lt;p&gt;1.解决了模块间页面切换和跳转的难题，解除了这种场景下的耦合性&lt;br /&gt;
2.便于服务器下发动态配置文件来配置某些场景和活动的跳转逻辑&lt;br /&gt;
3.统一了iOSAndroid两端的页面跳转逻辑，甚至能统一三端的请求资源的方式&lt;br /&gt;
4.解决了外部跳转到App内部一个界面的问题，比如推送,3D Touch等外部请求&lt;br /&gt;
5.改变既定跳转线路，达到热修复的目的&lt;/p&gt;
&lt;h3 id=&quot;路由的实现&quot;&gt;路由的实现&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;我们的考虑&lt;/strong&gt;&lt;br /&gt;
我们在实现路由和沿用原命令号的方式主要希望达到以下几点：&lt;br /&gt;
1.各业务方可以自己维护跳转代码&lt;br /&gt;
2.路由过程对业务方透明&lt;br /&gt;
3.兼容原命令号&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;设计流程&lt;/strong&gt;
&lt;img src=&quot;/img/mobileYY-CommandRoute.png&quot; alt=&quot;图片2&quot; /&gt;
也可点这里→&lt;a href=&quot;https://www.processon.com/view/link/5ab1380be4b007d2510ceec9&quot;&gt;图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大概流程如下： &lt;br /&gt;
1.命令号格式由各业务维护，包括命令号的执行逻辑，比如跳转。&lt;br /&gt;
我们通过YYURINavigationCenter+XXXXClass的分类方式的设计由各业务方自己添加跳转逻辑。&lt;br /&gt;
每个分类下可注册多个命令号格式，每个命令号格式需实现两个方法:注册命令号到路由里
和定义自己的跳转逻辑&lt;br /&gt;
并且我们通过带名传参的宏简化了业务注册的代码，如下图&lt;br /&gt;
&lt;img src=&quot;/img/mobileYY-CommandRoute_code2.jpg&quot; alt=&quot;图片3&quot; /&gt;
各业务方只需要实现如下图的简单代码就可以完成一个命令号格式
&lt;img src=&quot;/img/mobileYY-CommandRoute_code1.jpg&quot; alt=&quot;图片4&quot; /&gt;&lt;br /&gt;
2.App启动去注册路由动作&lt;br /&gt;
App启动的时候去调用所有YYURINavigationCenter类的以_UriNavigationCenterResign开头的方法（通过宏定义创建），以完成在YYRouteManager里YYRouteHandlerBlock与命令号的对应关系注册  &lt;br /&gt;
3.业务方调用YYRouteManager的单例来传入一个命令号&lt;br /&gt;
传入命令号以及VC和动画参数等，打包这些参数给YYRouteManager，YYRouteManager内部根据此命令号创建路由对象YYRoute，遍历已注册的所有路由关系，创建或使用已创建的命令号格式匹配对象YYRouteMatcher，每一种命令号格式对应一个YYRouteMatcher  &lt;br /&gt;
4.YYRouteMatcher的匹配操作&lt;br /&gt;
遍历所有YYRouteMatcher，会先判断传入的命令号是否是标准URL&lt;br /&gt;
如果不是标准URL，通过YYRouteMatcher对应的命令号格式生成的匹配正则表达式匹配此命令号。
如果是标准URL，则通过URL规则去匹配命令号，为了兼容旧命令号，如果这里匹配不通过，会当做不标准URL继续尝试匹配。
直到有YYRouteMatcher可以匹配当前的命令号&lt;br /&gt;
5.执行该命令号格式对应的block方法&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Mar 2018 08:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/01/CommandRoute/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/01/CommandRoute/</guid>
        
        <category>原创</category>
        
        <category>iOS开发</category>
        
        
      </item>
    
      <item>
        <title>mobileYY_Channel-Templatization</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“PC YY直播间有很多模板，娱乐模板，游戏直播模板，教育模板，交友模板，乱斗模板，抓娃娃模板，回放模板等等，不同的模板有不同的业务，负责不同的功能，手Y的直播间模板化做法也是由此而生”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;直播间的模板化&quot;&gt;直播间的模板化&lt;/h1&gt;

&lt;p&gt;模板自PC YY已有，直播间的模板化本质是根据不同的模板ID，事先定义该模板具有的业务，然后在进频道或者切换频道时加载这个模板，即这些模板具有的业务。 比如开头提到的
娱乐模板，这是最常用业务最多的一个模板&lt;br /&gt;
&lt;img src=&quot;/img/mobileYY-Channel-Templatization_entertainment.jpg&quot; alt=&quot;图片1&quot; /&gt;&lt;br /&gt;
还有游戏模板&lt;br /&gt;
&lt;img src=&quot;/img/mobileYY-Channel-Templatization_game.jpg&quot; alt=&quot;图片2&quot; /&gt;&lt;br /&gt;
抓娃娃模板是比较简单，业务量较少的&lt;br /&gt;
&lt;img src=&quot;/img/mobileYY-Channel-Templatization_crane.jpg&quot; alt=&quot;图片3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;模板化的必要性&lt;/strong&gt; &lt;br /&gt;
1.受制于不同的业务分类，一个频道可能有多种不同的业务加载和显示&lt;br /&gt;
2.大部分业务是基于开播业务的，这就要求观众在进频道后就需要知道当前主播的开播类型，低成本的做法是主播一开播就告诉后台一些开播种类相关的参数，观众在进这个频道时拿到这些参数，根据这些参数来加载与当前开播方式相关的业务，而不需要每个观众在进频道后都收到不同的业务后台的不同的广播来告诉加载什么业务&lt;br /&gt;
3.减少了代码冗余和低效率的使用，大部分情况下A模板是不需要B模板的业务的&lt;br /&gt;
4.降低了潜在的耦合&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;手Y直播间模板化&lt;/strong&gt; &lt;br /&gt;
手Y直播间的模板化参照PC YY的模板化的思想，把业务组件独立，在不同的模板里加载&lt;/p&gt;

&lt;p&gt;​
​&lt;/p&gt;
&lt;h1 id=&quot;观众端的模板化&quot;&gt;观众端的模板化&lt;/h1&gt;
&lt;p&gt;这里拿观众端娱乐模板举起一个栗子
&lt;img src=&quot;/img/mobileYY-Channel-Templatization_audience.png&quot; alt=&quot;图片1&quot; /&gt;
也可点这里→&lt;a href=&quot;https://www.processon.com/view/link/5aaf7191e4b0d248ffd08dcc&quot;&gt;图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大概流程如下：&lt;br /&gt;
1.根据从外源比如首页拿到的的豆腐块数据拿到topSid,subSid,tpl（PC模板号）,uid,isGame等等信息，构造YYChannelUserInfo   &lt;br /&gt;
2.传入presentChannelViewControllerWithUserInfo:方法&lt;br /&gt;
3.创建YYParentChannelViewController父类，并用UINavigationController的子类包裹  &lt;br /&gt;
4.查找模板类型  &lt;br /&gt;
5.告诉SDK开始进频道  &lt;br /&gt;
6.加载指定的模板VC &lt;br /&gt;
7.加载相应的组件&lt;/p&gt;

&lt;h1 id=&quot;开播端的模板化&quot;&gt;开播端的模板化&lt;/h1&gt;
&lt;p&gt;开播端相对稍微复杂一点，这里拿普通开播模板举起一个栗子
&lt;img src=&quot;/img/mobileYY-Channel-Templatization_live.png&quot; alt=&quot;图片2&quot; /&gt;
也可点这里→&lt;a href=&quot;https://www.processon.com/view/link/5ab0cf8ce4b0e9353394a197&quot;&gt;图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;开播端会先加载一个可上传标题，封面等的一个预览页，这时候主播已经能看到自己了，点击开播按钮后才正式进入直播间，加载模板&lt;br /&gt;
&lt;br /&gt;
大概流程如下：&lt;br /&gt;
1.从手机开播方式获取到当前的开播模式（普通，轮麦，M直播）  &lt;br /&gt;
2.传入presentLiveParentViewController:方法&lt;br /&gt;
3.调p_presentNormalLiveChannelViewController方法  &lt;br /&gt;
4.创建LiveParentViewController父类  &lt;br /&gt;
5.记录当前的模板类型  &lt;br /&gt;
6.用UINavigationController的子类包裹LiveParentViewController &lt;br /&gt;
7.presentViewController后viewDidLoad&lt;br /&gt;
8.加载主播音视频层界面
9.添加预览界面&lt;br /&gt;
10.点击开播按钮，开始3s倒计时动画界面&lt;br /&gt;
11.移除预览界面&lt;br /&gt;
12.创建当前的模板类LiveParentNormalTemplate,模板类再创建LiveChannelViewController，alpha=0，添加在LiveParentViewController上&lt;br /&gt;
13.同步加载所需的所有组件&lt;br /&gt;
     在3s结束后，LiveChannelViewController，alpha=1&lt;/p&gt;

&lt;h3 id=&quot;开播模板uml&quot;&gt;开播模板UML&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/mobileYY-Channel-Templatization_liveUML.jpg&quot; alt=&quot;图片3&quot; /&gt;
开播的核心类是LiveParentViewController。控制着音视频逻辑、业务逻辑（LiveParentTemplate实例）等。
LiveParentViewController用模板ID（TemplateID）通过LiveParentTemplateFactory实例化指定模板，调用接口化（ILiveParentTemplate）后的模板实例来处理模板逻辑。
开播业务模板首先需继承LiveParentBaseTemplate基类。然后实现ILiveParentTemplate，协议内各函数在协议类有具体说明。initTemplate、destoryTemplate、excuteTemplateAuth是必须实现的，分别代表初始化、销毁、开播鉴权。业务UIViewController在模板内创建并由模板控制。如LiveParentNormalTemplate模板类创建了LiveChannelViewController。&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Feb 2018 08:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/01/Channel-Templatization/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/01/Channel-Templatization/</guid>
        
        <category>原创</category>
        
        <category>iOS开发</category>
        
        
      </item>
    
      <item>
        <title>mobileYY_Channel-Modularization</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“来YY快1年了,也做了很多直播间内的业务，今天介绍一下我们正在优化的手Y直播间的组件化加载”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;手y的直播间&quot;&gt;手Y的直播间&lt;/h1&gt;
&lt;p&gt;手Y的直播间本质上就是YY的频道，进直播间等同于先进了某个频道，对开播侧的主播来说也是如此，然后再实现频道内的几乎所有功能，频道是直播间的一个剥离具体业务的抽象。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;手Y直播间需要有PC频道物理相关的所有功能:&lt;/strong&gt;&lt;br /&gt;
1.频道管理功能&lt;br /&gt;
管理员有把用户拖进或踢出频道的功能，也有把用户拖上麦序或拖离麦序的功能&lt;br /&gt;
2.频道号&lt;br /&gt;
常见的频道号有显式的官频号,短位和长位号以及子频道号&lt;br /&gt;
开发层面的频道号只识别顶级频道号TopSid和子频道号SubSid的对应关系&lt;br /&gt;
3.视频流与直播间&lt;br /&gt;
视频流不依赖于直播间，可能正在进频道的过程时就已经开始走视频流拉取流程。比如开播端&lt;br /&gt;
4.直播间主播和首麦&lt;br /&gt;
直播间的主播指的就是当前在首麦的用户，它不一定是该直播间的拥有者，也不一定是当前直播间的视频流上传者，麦序是麦序，视频流是视频流。比如YY交友业务里的乱斗玩法，首麦和次麦两路流都上传，观众侧看到的可能是次麦&lt;br /&gt;
5.进频道与频道切换&lt;br /&gt;
​进频道是需要登录的，没登录账号就能进直播间是因为使用了匿名账号登录，当登录账号或者切换账号时，需要退出直播间然后重新进一次直播间。当然，在一个频道里切换子频道也是需要这样操作&lt;br /&gt;
…&lt;br /&gt;
​等等&lt;br /&gt;
​  &lt;br /&gt;
&lt;strong&gt;手Y直播间也需要有频道里业务相关的所有功能：&lt;/strong&gt;&lt;br /&gt;
1.公屏&lt;br /&gt;
2.弹幕&lt;br /&gt;
3.麦序列表 &lt;br /&gt;
4.送礼&lt;br /&gt;
5.礼物流水动画&lt;br /&gt;
6.各种h5玩法（周星周卡,幸运转盘…）&lt;br /&gt;
7.私聊&lt;br /&gt;
8.清晰度切换  &lt;br /&gt;
9.连麦&lt;br /&gt;
10.关注&lt;br /&gt;
…&lt;br /&gt;
&lt;strong&gt;还有结合手机业务相关的所有功能：&lt;/strong&gt;&lt;br /&gt;
1.转屏&lt;br /&gt;
2.音频模式&lt;br /&gt;
3.清屏&lt;br /&gt;
4.分享&lt;br /&gt;
5.大礼物&lt;br /&gt;
6.贵族&lt;br /&gt;
7.玩法（主要在主播端，欢乐篮球,欢乐斗,还有最近做的吃货脸萌,魔法手势,变声…） &lt;br /&gt;
8.美颜（主要在主播端）  &lt;br /&gt;
9.贴纸（主要在主播端）   &lt;br /&gt;
10.音乐（主要在主播端）   &lt;br /&gt;
11.贡献榜&lt;br /&gt;
12.h5活动条&lt;br /&gt;
… &lt;br /&gt;
hnmmm…有这么多:
&lt;img src=&quot;/img/mobileYY-Channel-Modularization_moduleNums.jpg&quot; alt=&quot;图片1&quot; /&gt;&lt;br /&gt;
组件化主要组件的是频道里的业务相关功能，上图里的每一个ModuleId都对应一个组件。&lt;br /&gt;
​&lt;/p&gt;
&lt;h1 id=&quot;直播间的组件化&quot;&gt;直播间的组件化&lt;/h1&gt;
&lt;p&gt;手Y的直播间按使用人群分可分为两类，观看端和开播端；按模式分可分为至少三类，麦序模式，主席模式，自由模式；按模板分可分为开播端模板，娱乐模板，游戏模板，抓娃娃模板等等。不同的端，不同的模式，不同的模板，会加载不同的业务；不同的业务，拥有不同的view，各个view之间有业务上的交互，还有view之间的约束依赖。&lt;br /&gt;
现有业务在小小的屏幕上占一个坑，以后的业务又还想再进来。旧的模板满足不了日益增多的功能，新的模板又需要兼容一部分旧的模板。&lt;br /&gt;
基于模板和模式的手Y直播间加载各个业务view，采用了组件化的方式，重点考虑了以下几个要素：    &lt;br /&gt;
组件独立处理业务，不耦合太严重。&lt;br /&gt;
组件之间需要交互，但要低耦合。&lt;br /&gt;
组件应该在模板下有某种方式自动加载。  &lt;br /&gt;
组件的约束应该可以方便的设置和修改。&lt;br /&gt;
不同的模板要允许自定义加载不同的组件。&lt;/p&gt;

&lt;p&gt;所以，我们重新设计了直播间的组件化加载方式。&lt;/p&gt;

&lt;h3 id=&quot;一个组件&quot;&gt;一个组件&lt;/h3&gt;
&lt;p&gt;一个组件至少需要以下部分：&lt;br /&gt;
1.组件的View及其业务逻辑&lt;br /&gt;
2.组件的布局&lt;br /&gt;
3.组件的加载&lt;br /&gt;
代码上由以下构成：&lt;br /&gt;
1.ModuleView:YYChannelModuleView，是被添加到直播间的一个组件的view的入口，这个view就是这个组件在直播间的containerView&lt;br /&gt;
2.AreaView：ModuleView的parentView，建立与直播间superView的约束，ModuleView平铺在这个View上&lt;br /&gt;
3.ViewModel:YYChannelModuleUIManager，每个YYChannelModuleView都关联一个UIManager的ViewModel，是组件的业务逻辑所在，相当于moduleView的ViewController&lt;br /&gt;
4.DataProvider:YYChannelModuleDataProvider，为moduleView提供网络请求和数据&lt;br /&gt;
5.IXXXModuleBridge,ModuleBridge:YYBridge &lt;IXXXModuleBridge&gt;与ModuleImplementation:YYImplementation &lt;IXXXModuleBridge&gt;，为其他组件暴露接口，方便其他组件调用本组件的逻辑。  
7.ModuleStatistic:NSObject &lt;IModuleStatistic&gt;，数据上报使用  
8.Views，是组件所用到的自定义SubViews&lt;/IModuleStatistic&gt;&lt;/IXXXModuleBridge&gt;&lt;/IXXXModuleBridge&gt;&lt;/p&gt;

&lt;h3 id=&quot;组件加载&quot;&gt;组件加载&lt;/h3&gt;
&lt;p&gt;这里拿观众端娱乐模板+麦序模式举起一个栗子
&lt;img src=&quot;/img/mobileYY-Channel-Modularization.png&quot; alt=&quot;图片2&quot; /&gt;
也可点这里→&lt;a href=&quot;https://www.processon.com/view/link/5aafe49be4b0e935339228b5&quot;&gt;图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大概流程如下：&lt;br /&gt;
1.娱乐模板YYEChannelTemplateController的super YYBaseChannelViewController  &lt;br /&gt;
2.基础模板YYBaseChannelViewController刚加载的时候创建ModeController  &lt;br /&gt;
3.ModeController创建ModeLoader&lt;br /&gt;
4.modeLoader根据麦序模式创建ModeModuleFactory和ModeLayoutFactory
ModuleFactory中创建YYModuleLoader，设置moduleConstructBlock，并用moduleId注册到一个map中，在后续YYChannelModeLoader加载某个组件时，通过moduleId取出moduleConstructBlock并执行，从而初始化并添加moduleView。
布局的管理由LayoutFactory管理，对每个组件创建YYLayoutLoader，包含p_layoutBlock(竖屏约束)，l_layoutBlock（横屏约束）和fixed_layoutBlock（固定约束），并同样的以moduleId作为key注册到一个map中，方便后续YYChannelModeLoader加载时使用&lt;br /&gt;
5.执行loadModuleWithModuleId开始加载组件&lt;br /&gt;
6.首先加载完AreaLayout（拿moduleLoader.areaConstruct()用layoutLoader根据moduleId选择加约束在YYBaseChannelViewController的view还是modalView或是contentView）&lt;br /&gt;
7.然后加载Module（ModuleLoader调createModule通过moduleViewConstruct()生成一个YYmodule，然后area.areaView addSubView:module.moduleView并平铺）
8.调用p_moduleDidLoad方法，使用module.moduleView设置业务逻辑&lt;br /&gt;
9.YYChannelModeLoader继续加载，遍历剩下的defaultModuleList，并加载每个moduleId，根据moduleId，从ModuleFactory中取出moduleConstructBlock，从LayoutFactory中取出layoutBlock，从areaFactory中取出areaConstruct，由此构造出完整的组件并添加到直播间view中。&lt;/p&gt;

&lt;h3 id=&quot;一群组件&quot;&gt;一群组件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/mobileYY-Channel-Modularization_modules.jpg&quot; alt=&quot;图片3&quot; /&gt;
完成了以上的加载，看下直播间的的hierarchy
可以看到YYParentChannelViewController下层是YYEChannelTemplateViewController（娱乐模板），YYBaseTemplateView是模板上的View，组件被添加在了三种ContainerView（图没有截全），分别是contentView,ModalView和自身的view。&lt;/p&gt;

&lt;h3 id=&quot;层级关系&quot;&gt;层级关系&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/mobileYY-Channel-Modularization_hierarchy.jpg&quot; alt=&quot;图片5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ViewController的有三个view，分别是ChannelVC的self.view，self.contentView和self.modalView。默认情况下，组件是加载到contentView中，modalView一般用来显示直播间的弹框等模态的view，而且一些组件比如onlineListModuleView，因为他覆盖在整个直播间上，相当于push了一个新的vc，所以也加载了modalView中。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;组件化使得各业务可以独立处理，相互之间耦合程度大大降低。各业务View在moduleLoader和layoutLoader的配合下加载，可以方便的设置,修改和新增。各业务逻辑集中在ModuleView和ViewModel内部，如果业务组件间需要交互，通过抛通知的方式或者GetCore注册调用或单例的方式拿&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 29 Jan 2018 08:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/29/Channel-Modularization/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/29/Channel-Modularization/</guid>
        
        <category>原创</category>
        
        <category>iOS开发</category>
        
        
      </item>
    
      <item>
        <title>mobileYY_Push</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“最近在交接Push业务，也举办了一次分享会介绍手Y的Push业务以及新增的notificationService Extension对同事们的影响”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;apns&quot;&gt;APNs&lt;/h1&gt;
&lt;p&gt;手Y iOS的推送用的是APNs，全称Apple Push Notification Service，iOS开发所用的推送服务一般都是苹果的这一套。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Push-APNS.jpg&quot; alt=&quot;图片1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;机制概述&lt;/strong&gt;&lt;br /&gt;
Provider：可以理解为程序后台的推送服务器&lt;br /&gt;
第一阶段：Provider把打包的信息（按照开发文档约定的HTTP/2 接口请求，携带必要的信息）发给APNs。&lt;br /&gt;
第二阶段：APNs在自身的已注册推送服务的设备列表中，查找有相应标识的设备，并把消息发送到对应设备。&lt;br /&gt;
第三阶段：设备把发来的消息传递给相应的应用程序做展示和处理&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;部分特性&lt;/strong&gt;&lt;br /&gt;
面向一统苹果终端设备的推送服务（service for iOS (and, indirectly, watchOS), tvOS, and macOS devices）
经过认证的、加密的、持久的系统级的IP连接&lt;br /&gt;
独立的系统级进程&lt;br /&gt;
可控的展示和处理&lt;/p&gt;

&lt;p&gt;相比较Android的各大厂商一套，优点很明显。&lt;br /&gt;
各自应用维护各自的长连接，到达率很低。产品经常吐槽这一点&lt;br /&gt;
多种协议,服务或轮询的方式，增加了兼容的成本。Android没有类似iOS的本地推送，所以之前有一个倒计时使用本地推送的业务，他们采用了后台跑一个程序，轮询的方案来实现，iOS就简单多了&lt;br /&gt;
不同厂商的服务不同，传输的供客户端识别的数据也可能不同，增加了前后台开发沟通的成本。比如有图样式这样一个业务&lt;br /&gt;
不同厂商或终端的推送层级不同，有的是应用在前台的时候，有的kill进程也可以出现&lt;br /&gt;
…&lt;br /&gt;
等等&lt;/p&gt;

&lt;h1 id=&quot;推送流程&quot;&gt;推送流程&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;流程概述&lt;/strong&gt;&lt;br /&gt;
​&lt;img src=&quot;/img/Push-flow.jpg&quot; alt=&quot;图片2&quot; /&gt;
a.应用程序向 APNs 服务器注册&lt;br /&gt;
b.注册成功后会收到APNs服务器的回调，收到一个 devicetoken&lt;br /&gt;
c.将这个 devicetoken 发送给我们自己的应用推送服务器&lt;br /&gt;
d.应用推送服务器将打算要发送的消息按照指定的格式进行打包，然后结合 iOS 设备的 devicetoken一起发请求给 APNs 服务器&lt;br /&gt;
e.b注册成功后我们的应用会和 APNs 服务器维持一个基于 TCP 的长连接，APNs 服务器将新消息推送到iOS 设备上&lt;br /&gt;
f.设备上的推送子进程或App主进程根据App生存状态处理推送任务&lt;/p&gt;

&lt;p&gt;​  &lt;br /&gt;
​  &lt;br /&gt;
&lt;strong&gt;实现细节&lt;/strong&gt;&lt;br /&gt;
1.devicetoken的获取&lt;br /&gt;
  a.app开启推送功能，开发者中心网站配置推送证书+app内配置&lt;br /&gt;
  b.客户端去注册&lt;br /&gt;
  c.收到注册状态成功或失败的回调，成功回调里包括devicetoken值&lt;br /&gt;
2.把devicetoken发送给推送服务器存储&lt;br /&gt;
3.推送服务器发送推送请求给某一devicetoken&lt;br /&gt;
  a.与APNs服务器使用TLS协议请求连接&lt;br /&gt;
  b.基于JW Token的方式（header（alg+kid（开发者中心网站配置））+payload（teamID+时间戳）+signature（对header+payload使用私钥加密）） 或 基于证书方式（证书（开发者中心网站配置SSL证书并生成p12）+私钥）来保持&lt;br /&gt;
  c.发送基于HTTP/2的数据请求给APNs&lt;br /&gt;
    :method POST&lt;br /&gt;
    :host           dev: api.development.push.apple.com:443&lt;br /&gt;
            distribute: api.push.apple.com:443&lt;br /&gt;
    :path /3/device/devicetoken&lt;br /&gt;
&lt;br /&gt;
     header:&lt;br /&gt;
     authorization:JWT认证方式需要的JW Token&lt;br /&gt;
     apns-expiration:通知过期时间。&lt;br /&gt;
     apns-id:标识通知的UUID。如果发送通知时发生错误，APNs 使用此值来标识通知，通知服务器。&lt;br /&gt;
     apns-priority:通知优先级。&lt;br /&gt;
     apns-topic:标识bundleId。JWT认证方式必须要，证书方式可使用证书里自带的。&lt;br /&gt;
     apns-collapse-id:会覆盖客户端此值相同的消息。&lt;br /&gt;
​&lt;img src=&quot;/img/Push-APayload.jpg&quot; alt=&quot;图片3&quot; /&gt;
  d.收到response/成功：APNs做下一步发送给设备处理&lt;br /&gt;
4.客户端进行处理&lt;br /&gt;
​&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;本地推送：由客户端直接创建的推送消息，创建成功直接交付本机推送子进程或App主进程，可使用苹果推送框架间接对payload数据进行创建，并指定推送数据触发时机（时间,地点,重复机制）等&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;客户端的处理&quot;&gt;客户端的处理&lt;/h1&gt;
&lt;p&gt;客户端的处理从APNs把消息信息交付推送子进程开始，在不同的框架+Extension下流程会不同。
可见数据：一部分header和payload信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Push-ClientHandle.jpg&quot; alt=&quot;图片4&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;notificationservice-extension&quot;&gt;notificationService Extension&lt;/h1&gt;

&lt;p&gt;手Y在7.1版实现了在App进程不运行的时候也要完成有图样式的推送展示，主要使用了NotificationService Extension&lt;br /&gt;
&lt;img src=&quot;/img/Push-notificationServiceExtension.jpg&quot; alt=&quot;图片5&quot; /&gt;
实现这个需求需要做以下事情&lt;br /&gt;
1.在客户端新增notificationServiceExtension，以及-didReceiveNotificationRequest:withContentHandler:并实现对原有UNMutableNotificationContent的修改以及增加图片attachment&lt;br /&gt;
2.业务后台或者分发Push侧增加aps的mutable-content = 1字段以及包含图片下载链接的字段等&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;通过这个需求也给了我一些启示。&lt;br /&gt;
Extension可以补充在App主进程上做不到的一些需求，比如推送带附件。（推送数据包只有4k，但可以在Extension里有30s下载时间），甚至iOS推送送达率统计&lt;br /&gt;
实现App主进程不启动的情况下的一些需求。如下载图片,视频等；在展示前改变原有推送payload等&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;意想不到的问题&quot;&gt;意想不到的问题&lt;/h3&gt;
&lt;p&gt;1.在开发notificationServiceExtension的时候，除了一般的开发工作，还需要像主工程那样的为这个Extension注册（Wildcard App ID：com.yy.yymobile.xxxxxx.*,是的没错，带个星号），生成Provisioning Profiles文件。于是这个证书就成为了每位手Y iOS开发同事所必备的了，邮件群发了好多人，好多组。 &lt;br /&gt;
2.ci构建系统恰逢升级Xcode9。正常在Xcode8下，会生成YYMobile.app/embedded.mobileprovision和/PlugIns/notificationService.appex/embedded.mobileprovision
但是Xcode9，只生成了YYMobile.app/embedded.mobileprovision，没有extension的，embedded.mobileprovision。这就造成了潜在的App下载成功但是安装不了的问题。原因是Xcode9要在编译时带上签名，这就需要事先知道要编译Extension且还要拿到extension的{PRODUCT_NAME}，所以我们在原先的编译配置文件里增加了一个extension=true的字段并且与ci约定了一种新的配置文件，一种Extension写一个，针对不同生产和发布环境各在Configuration里放一个绑定，并使用&lt;br /&gt;
APP_BUNDLE_IDENTIFIER: 主app的bundle identifier（用于作为Extension的bundle identifier的前缀），构建时会自动更新&lt;br /&gt;
PRODUCT_NAME : Extension工程名称也是Extension的目录名称，可用于获取Info.plist文件并修改版本号&lt;br /&gt;
BUNDLE_ID_SUFFIX: Extension的bundle identifier的后缀名称，一般与Extension的PRODUCT_NAME一致&lt;br /&gt;
PRODUCT_BUNDLE_IDENTIFIER: Extension target对应的bundle identifier。由主app的bundle id和extension的后缀名称组成&lt;br /&gt;
PROVISIONING_PROFILE_SPECIFIER：Extension target构建时所需要使用的profile，构建时会自动更新&lt;br /&gt;
这样放在工程的根目录下的一个约定好的目录里，供ci的脚本识别&lt;/p&gt;

</description>
        <pubDate>Mon, 18 Dec 2017 08:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/12/18/Push/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/18/Push/</guid>
        
        <category>原创</category>
        
        <category>iOS开发</category>
        
        
      </item>
    
      <item>
        <title>First blog contribute to LIFE</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s a good start.”&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 29 Nov 2016 08:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/11/29/first-blog/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/29/first-blog/</guid>
        
        <category>生活</category>
        
        
      </item>
    
  </channel>
</rss>
